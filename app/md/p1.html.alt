<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" type="text/css" href="https://kpym.github.io/markdown-css/github.min.css">
    <title>POC 1: &#34;Data service&#34; style</title>
  </head>
	<body>
		<article class="markdown-body">
<h1 id="poc-1-data-service-style">POC 1: &ldquo;Data service&rdquo; style</h1>
<p>Find the other PoCs via the <a href="https://dev.azure.com/RWEST-MFI-AU/UK%20Power/_workitems/edit/2985">parent ticket</a>.<br>
Remark: place comments only in the <a href="https://dev.azure.com/RWEST-MFI-AU/UK%20Power/_workitems/edit/2986">ticket</a>
rather than in the <a href="https://dev.azure.com/RWEST-MFI-AU/Common/_wiki/wikis/Common.wiki/88/Kubernetes-PoC">wiki</a></p>
<h2 id="test-program">Test Program</h2>
<p>A web server listens on port 80. On request it queries an oracle database and returns the result in an html page.<br>
The path in the REST url is processed <a href="/poc1/docker/poc1.py">in the code</a></p>
<p>Currently, the containers can be reached in the browser via these URLs:</p>
<ul>
<li><a href="http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/">http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/</a></li>
<li><a href="http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/healthz">http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/healthz</a></li>
<li><a href="http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/date">http://internal-a5e9d4ab256744c1f96dac1002d61358-1469812703.eu-central-1.elb.amazonaws.com/date</a></li>
</ul>
<p>But once the load balancer is recreated you need to read the DNS name from the service. <br>
Get the DNS address:</p>
<pre><code>POC1_HOSTNAME=$( k get svc poc1 -o json | jq -r .status.loadBalancer.ingress[].hostname )
</code></pre>
<p>and construct the REST paths:</p>
<ul>
<li><code>http://${POC1_HOSTNAME}/</code></li>
<li><code>http://${POC1_HOSTNAME}/healthz</code></li>
<li><code>http://${POC1_HOSTNAME}/date</code></li>
</ul>
<h2 id="kubernetes">Kubernetes</h2>
<p>A container orchestration system.<br>
<a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/</a></p>
<h3 id="k8s-manifests">K8s Manifests</h3>
<ul>
<li><a href="/poc1/k8s/manifest/deployment.yaml">deployment</a></li>
<li><a href="/poc1/k8s/manifest/service.yaml">service</a></li>
</ul>
<hr>
<h2 id="demo-1-zero-downtime-manual-deployment">Demo 1: Zero Downtime Manual Deployment</h2>
<p>Imagine you have a fully automatic delivery pipeline. A code change finally
leads to a roll out of a new version during business hours.<br>
This demo shows an upgrade without service interruption.</p>
<p>Window 1 - Watch the deployment serving requests continuously:</p>
<pre><code>unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
source functions.sh 
assume-cicd-role  $ENV_ACCOUNT_ID 

KUBECONFIG=$(realpath poc1/k8s/kubeconfig)
POC1_HOSTNAME=$( k get svc poc1 -o json | jq -r .status.loadBalancer.ingress[].hostname )

while true; do
  kubectl exec -ti busybox -- wget -q http://${POC1_HOSTNAME}  -O-;
  kubectl exec -ti busybox -- wget -q http://${POC1_HOSTNAME}/date  -O-;
  echo
done
</code></pre>
<p>Window 2 - Watch the pods running and restarting</p>
<pre><code>unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
source functions.sh 
assume-cicd-role  $ENV_ACCOUNT_ID 

KUBECONFIG=$(realpath poc1/k8s/kubeconfig)
watch kubectl get po -l app=poc1
</code></pre>
<p>Window 3 - Run a deployment restarting all the pods:</p>
<pre><code>unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
./poc1/10-deploy.sh $ENV_ACCOUNT_ID
</code></pre>
<hr>
<h2 id="terraform-code">Terraform Code</h2>
<ul>
<li><a href="/aws-terraform-eks/30-main/main.tf">Cluster</a></li>
<li><a href="/aws-terraform-eks/30-main/tag.tf">Load Balancer</a></li>
<li><a href="/poc1/30-main/main.tf">Registry (ECR)</a></li>
</ul>
<h3 id="alive-resources-in-aws">Alive Resources in AWS</h3>
<p>Currently, resources run in the non-prod account, only. Use the <em>prod account id</em> to deploy to prod, too.</p>
<ul>
<li>cluster <a href="https://eu-central-1.console.aws.amazon.com/eks/home?region=eu-central-1#/clusters">https://eu-central-1.console.aws.amazon.com/eks/home?region=eu-central-1#/clusters</a></li>
<li>EC2 <a href="https://eu-central-1.console.aws.amazon.com/ec2/v2/home?region=eu-central-1#Instances:instanceState=running">https://eu-central-1.console.aws.amazon.com/ec2/v2/home?region=eu-central-1#Instances:instanceState=running</a></li>
<li>ELB</li>
<li>Registry <a href="https://eu-central-1.console.aws.amazon.com/ecr/repositories?region=eu-central-1">https://eu-central-1.console.aws.amazon.com/ecr/repositories?region=eu-central-1</a></li>
<li>S3  <a href="https://s3.console.aws.amazon.com/s3/home?region=eu-central-1#">https://s3.console.aws.amazon.com/s3/home?region=eu-central-1#</a></li>
<li>DynamoDB <a href="https://eu-central-1.console.aws.amazon.com/dynamodbv2/home?region=eu-central-1#tables">https://eu-central-1.console.aws.amazon.com/dynamodbv2/home?region=eu-central-1#tables</a></li>
</ul>
<h2 id="pipeline">Pipeline</h2>
<ul>
<li><a href="/aws-terraform-eks/pipeline.yaml">code for the EKS cluster</a></li>
<li><a href="/poc1/pipeline.yaml">code k8s deployment</a></li>
<li><a href="https://dev.azure.com/RWEST-MFI-AG/DevOps%20Transition/_build?definitionId=350">in Azure DevOps</a></li>
</ul>
<hr>
<h2 id="demo-2-zero-downtime-deployment-using-pipelines">Demo 2: Zero Downtime Deployment using Pipelines</h2>
<p>Unlike in the previous demo let&rsquo;s modify the code, push it to the git server.</p>
<p>Modify <a href="/poc1/docker/poc1.py">the python code</a> to print <code>PPPPP</code> instead of <code>PoC 1</code> and push the changes to
the git server. Watch the output change over time in &lsquo;Window 1&rsquo;.</p>
<pre><code>sed -i 's/PoC 1/PPPPP/' poc1/docker/poc1.py
git commit -m&quot;modifies output: 'PoC 1' -&gt; PPPPP&quot; ./poc1/docker/poc1.py 
git push origin
</code></pre>
<p>This pipeline takes considerably more time than the CLI procedure.<br>
Also, on the command line we might only run the necessary steps which would make it even faster.</p>
<p>Check out and deploy the previous commit to revert the change quickly:</p>
<pre><code>git checkout HEAD^

unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
./poc1/10-deploy.sh $ENV_ACCOUNT_ID
</code></pre>
<p>Of course, our local git is not in sync with the server anymore.</p>
<hr>
<h2 id="a-few-commands">A few commands</h2>
<p>See the cluster nodes:</p>
<pre><code>lprager@l02:~/work/rwe/dot/git/dot/poc1$ k get nodes
NAME                                             STATUS   ROLES    AGE     VERSION
ip-10-44-161-162.eu-central-1.compute.internal   Ready    &lt;none&gt;   5d18h   v1.21.4-eks-033ce7e
</code></pre>
<p>Run the test script:</p>
<pre><code>lprager@l02:~/work/rwe/dot/git/dot$ ./poc1/40-test.sh $ENV_ACCOUNT_ID 
&lt;html&gt; &lt;head&gt;&lt;title&gt;PoC 1&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;p&gt;10/25/2021, 08:48:18&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>
<p>Create or update the EKS cluster:</p>
<pre><code>lprager@l02:~/work/rwe/dot/git/dot$ ./aws-terraform-eks/10-deploy.sh $ENV_ACCOUNT_ID 
</code></pre>
<p>Create or update only the PoC1 resources:</p>
<pre><code>lprager@l02:~/work/rwe/dot/git/dot$ ./poc1/10-deploy.sh $ENV_ACCOUNT_ID 
</code></pre>

		</article>
  </body>
</html>
